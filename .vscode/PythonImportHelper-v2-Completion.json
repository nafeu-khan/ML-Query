[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "category_encoders",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "category_encoders",
        "description": "category_encoders",
        "detail": "category_encoders",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "Orient",
        "importPath": "altair",
        "description": "altair",
        "isExtraImport": true,
        "detail": "altair",
        "documentation": {}
    },
    {
        "label": "X2Datum",
        "importPath": "altair",
        "description": "altair",
        "isExtraImport": true,
        "detail": "altair",
        "documentation": {}
    },
    {
        "label": "X2Datum",
        "importPath": "altair",
        "description": "altair",
        "isExtraImport": true,
        "detail": "altair",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "record",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "AgglomerativeClustering",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "AgglomerativeClustering",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "sqlite3,os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3.os",
        "description": "sqlite3.os",
        "detail": "sqlite3.os",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OrdinalEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "SimpleImputer",
        "importPath": "sklearn.impute",
        "description": "sklearn.impute",
        "isExtraImport": true,
        "detail": "sklearn.impute",
        "documentation": {}
    },
    {
        "label": "os,psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.psycopg2",
        "description": "os.psycopg2",
        "detail": "os.psycopg2",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "GradientBoostingRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "GradientBoostingClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "GradientBoostingRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "GradientBoostingClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "SVR",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVR",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "KNeighborsRegressor",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KNeighborsClassifier",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KNeighborsRegressor",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "KNeighborsClassifier",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "dill",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dill",
        "description": "dill",
        "detail": "dill",
        "documentation": {}
    },
    {
        "label": "TPOTRegressor",
        "importPath": "tpot",
        "description": "tpot",
        "isExtraImport": true,
        "detail": "tpot",
        "documentation": {}
    },
    {
        "label": "TPOTClassifier",
        "importPath": "tpot",
        "description": "tpot",
        "isExtraImport": true,
        "detail": "tpot",
        "documentation": {}
    },
    {
        "label": "TPOTRegressor",
        "importPath": "tpot",
        "description": "tpot",
        "isExtraImport": true,
        "detail": "tpot",
        "documentation": {}
    },
    {
        "label": "TPOTClassifier",
        "importPath": "tpot",
        "description": "tpot",
        "isExtraImport": true,
        "detail": "tpot",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "test_view",
        "importPath": "backend_app.views",
        "description": "backend_app.views",
        "isExtraImport": true,
        "detail": "backend_app.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.flatted",
        "description": "client.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "client.node_modules.flatted.python.test",
        "description": "client.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "client.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "Encoder",
        "kind": 6,
        "importPath": "server.backend_app.parser.classes.encoder",
        "description": "server.backend_app.parser.classes.encoder",
        "peekOfCode": "class Encoder:\n    def __init__(self, strategy: str, column: str, ordinal_dict=None, drop_first=False, target_var=None):\n        \"\"\"\n        Limitation:\n            - Supported strategy: ordinal, onehot, target\n            - Only accept 1 column (str)\n        \"\"\"\n        self.strategy = strategy\n        self.column = column\n        self.ordinal_dict = ordinal_dict",
        "detail": "server.backend_app.parser.classes.encoder",
        "documentation": {}
    },
    {
        "label": "categorize",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.categorize",
        "description": "server.backend_app.parser.Function.categorize",
        "peekOfCode": "def categorize(url,table_name,cmd):\n    feature=cmd[cmd.index(\"INSPECT\") + 1] \n    labels=[cat for cat in cmd[cmd.index(\"INTO\") + 1].split(',')]\n    response={}\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'\n    conn = create_engine(connection_string)\n    df=  pd.read_sql(query,conn)\n    df=pd.DataFrame(df)\n    min_value = df[feature].min()",
        "detail": "server.backend_app.parser.Function.categorize",
        "documentation": {}
    },
    {
        "label": "checknull",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.checknull",
        "description": "server.backend_app.parser.Function.checknull",
        "peekOfCode": "def checknull(url, table_name):\n    try:\n        response = []\n        postgres_url = os.getenv(\"POSTGES_URL\")\n        connection = psycopg2.connect(postgres_url)\n        cursor = connection.cursor()\n        cursor.execute(f\"SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}';\")\n        column_names = [row[0] for row in cursor.fetchall()]\n        print(column_names)\n        cursor.execute(f'SELECT * FROM \"{table_name}\"')",
        "detail": "server.backend_app.parser.Function.checknull",
        "documentation": {}
    },
    {
        "label": "cluster",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.cluster",
        "description": "server.backend_app.parser.Function.cluster",
        "peekOfCode": "def cluster(currentDB,conn, n_cluster):\n    query = f\"SELECT * FROM {currentDB}\"\n    df = pd.read_sql_query(query, conn)\n    # Perform clustering\n    X = df.values  # Assuming all columns are features\n    kmeans = KMeans(n_clusters=int(n_cluster))\n    kmeans.fit(X)\n    labels = kmeans.labels_\n    plt.figure(figsize=(8, 6))\n    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')",
        "detail": "server.backend_app.parser.Function.cluster",
        "documentation": {}
    },
    {
        "label": "csvToDB",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.csvToDB",
        "description": "server.backend_app.parser.Function.csvToDB",
        "peekOfCode": "def csvToDB(csv_file):\n    connection_string = os.getenv(\"POSTGES_URL\")\n    df = pd.read_csv(csv_file)\n    file_name, _ = os.path.splitext(csv_file.name)\n    column_data_types = {column: 'TEXT' for column in df.columns}\n    conn = psycopg2.connect(connection_string)\n    engine = create_engine(connection_string)\n    # Write the DataFrame to the database using the engine\n    df.to_sql(file_name, engine, index=False, if_exists='replace')\n    conn.commit()",
        "detail": "server.backend_app.parser.Function.csvToDB",
        "documentation": {}
    },
    {
        "label": "deduplicate",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.deduplicate",
        "description": "server.backend_app.parser.Function.deduplicate",
        "peekOfCode": "def deduplicate(url,command):\n    '''INSPECT * DEDUPLICATE FROM Boston;\n        INSPECT medv DEDUPLICATE FROM Boston;\n    '''\n    response = {'text': \"\"}\n    command_parts = command\n    table_name = command_parts[command_parts.index(\"FROM\") + 1].split(';')[0]\n    feature = command_parts[command_parts.index(\"INSPECT\") + 1]\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'",
        "detail": "server.backend_app.parser.Function.deduplicate",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.encoding",
        "description": "server.backend_app.parser.Function.encoding",
        "peekOfCode": "def encoding(url, table_name, cmd):\n    ''' INSPECT ENCODING USING ONE-HOT feature medv from boston '''\n    # conn = sqlite3.connect(url)\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'\n    conn = create_engine(connection_string)\n    data = pd.read_sql_query(query, conn)\n    features = cmd[cmd.index(\"INSPECT\") + 1]\n    method = cmd[cmd.index(\"METHOD\")+ 1] if \"METHOD\" in cmd else \"Ordinal\"\n    print(method)",
        "detail": "server.backend_app.parser.Function.encoding",
        "documentation": {}
    },
    {
        "label": "ordinal_encoding",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.encoding",
        "description": "server.backend_app.parser.Function.encoding",
        "peekOfCode": "def ordinal_encoding(data, var, cmd, conn, table_name):\n    \"\"\"INSPECT ENCODING USING Ordinal FEATURE Species FROM Iris;\"\"\"\n    unique_val = data[var].unique()  \n    enc_val = range(len(unique_val)) \n    order = cmd[cmd.index(\"ORDER\") + 1].split(',') if \"ORDER\" in cmd else data[var].unique()\n    ordinal_enc_dict = {val: new_val for val, new_val in zip(order, enc_val)}\n    if len(ordinal_enc_dict) == len(unique_val):\n        encoder = OrdinalEncoder(categories=[list(ordinal_enc_dict.keys())])\n        data[var] = encoder.fit_transform(data[[var]])\n        data.to_sql(table_name, conn, if_exists='replace', index=False)",
        "detail": "server.backend_app.parser.Function.encoding",
        "documentation": {}
    },
    {
        "label": "onehot_encoding",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.encoding",
        "description": "server.backend_app.parser.Function.encoding",
        "peekOfCode": "def onehot_encoding(data, var, cmd, conn, table_name):\n    \"\"\"INSPECT ENCODING USING One-Hot ENCODING FEATURE Species FROM Iris;\"\"\"\n    # data = pd.get_dummies(data[var]) it will also return one hot encoded data\n    encoder = OneHotEncoder()\n    encoded_data = encoder.fit_transform(data[[var]])\n    encoded_df = pd.DataFrame(encoded_data.toarray(), columns=encoder.get_feature_names_out([var]))\n    data = pd.concat([data, encoded_df], axis=1)\n    data.drop(columns=[var], inplace=True)\n    data.to_sql(table_name, conn, if_exists='replace', index=False)\n    print(data)",
        "detail": "server.backend_app.parser.Function.encoding",
        "documentation": {}
    },
    {
        "label": "label_encoding",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.encoding",
        "description": "server.backend_app.parser.Function.encoding",
        "peekOfCode": "def label_encoding(data, var, cmd, conn, table_name):\n    \"\"\"INSPECT ENCODING USING Label ENCODING FEATURE Species FROM Iris;\"\"\"\n    print('label encode')\n    label_encoder = LabelEncoder()\n    data[var] = label_encoder.fit_transform(data[var])\n    data.to_sql(table_name, conn, if_exists='replace', index=False)\n    print(data)\n    return f\"Label Encoding Succcessfully Done!\"\ndef target_encoding(data, cat_var, cmd, conn, table_name):\n    \"\"\"INSPECT ENCODING USING TARGET ENCODING FEATURE Species  TARGET-FEATURE SepalLengthCm FROM Iris;\"\"\"",
        "detail": "server.backend_app.parser.Function.encoding",
        "documentation": {}
    },
    {
        "label": "target_encoding",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.encoding",
        "description": "server.backend_app.parser.Function.encoding",
        "peekOfCode": "def target_encoding(data, cat_var, cmd, conn, table_name):\n    \"\"\"INSPECT ENCODING USING TARGET ENCODING FEATURE Species  TARGET-FEATURE SepalLengthCm FROM Iris;\"\"\"\n    try: target_var = cmd[cmd.index(\"TARGET-FEATURE\") + 1] if \"TARGET-FEATURE\" in cmd else None\n    except ValueError as ve: return None\n    # data = {\n    #     \"Make\": [\"Toyota\", \"Honda\", \"Toyota\", \"Ford\", \"Honda\", \"Ford\"],\n    #     # \"Price Range\": [\"High\", \"Medium\", \"Low\", \"Medium\", \"Low\", \"High\"],\n    #     \"Mileage\": [50000, 60000, 30000, 70000, 40000, 80000],\n    #     \"Age\": [5, 3, 7, 2, 4, 6],\n    #     \"Price\": [15000, 18000, 12000, 20000, 17000, 22000]",
        "detail": "server.backend_app.parser.Function.encoding",
        "documentation": {}
    },
    {
        "label": "impute",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.Imputer",
        "description": "server.backend_app.parser.Function.Imputer",
        "peekOfCode": "def impute(command):\n    response = {'text': \"\"}\n    command_parts = [part for part in command.split(\" \") if part.strip()]\n    table_name = command_parts[command_parts.index(\"FROM\") + 1].split(';')[0]\n    features = command_parts[command_parts.index(\"IMPUTE\") + 1]\n    strat = command_parts[command_parts.index(\"STRATEGY\") + 1] if \"STRATEGY\" in command_parts else \"mean\"\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'\n    conn = create_engine(connection_string)\n    data = pd.read_sql_query(query, conn)",
        "detail": "server.backend_app.parser.Function.Imputer",
        "documentation": {}
    },
    {
        "label": "show_db",
        "kind": 2,
        "importPath": "server.backend_app.parser.Function.Show_db",
        "description": "server.backend_app.parser.Function.Show_db",
        "peekOfCode": "def show_db(data):\n    splitted_data = data.split()\n    table_name = splitted_data[1].split(';')[0]\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'\n    engine = create_engine(connection_string)\n    data = pd.read_sql_query(query,engine)\n    conn = psycopg2.connect(connection_string)\n    response={}\n    response['table']=data.to_dict(orient=\"records\")",
        "detail": "server.backend_app.parser.Function.Show_db",
        "documentation": {}
    },
    {
        "label": "check_null_values_in_db",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.CheckNull",
        "description": "server.backend_app.parser.operation.CheckNull",
        "peekOfCode": "def check_null_values_in_db(db_file, table_name):\n    global response\n    # connection = sqlite3.connect(db_file)\n    connection_string = os.getenv(\"POSTGES_URL\")\n    query = f'SELECT * FROM \"{table_name}\"'\n    conn = create_engine(connection_string)\n    cursor = conn.cursor()\n    # Get column names\n    cursor.execute(f\"PRAGMA table_info({table_name})\")\n    columns_info = cursor.fetchall()",
        "detail": "server.backend_app.parser.operation.CheckNull",
        "documentation": {}
    },
    {
        "label": "select_algorithm",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Construct",
        "description": "server.backend_app.parser.operation.Construct",
        "peekOfCode": "def select_algorithm(operation_type, algorithm_name='AUTO_ML', **kwargs):\n    if algorithm_name == 'AUTO_ML':\n        if operation_type.upper() == \"PREDICTION\":\n            tpot_regressor = TPOTRegressor(generations=5, population_size=20, verbosity=2)\n            return tpot_regressor\n        elif operation_type.upper() == \"CLASSIFICATION\":\n            tpot_classifier = TPOTClassifier(generations=5, population_size=20, verbosity=2)\n            return tpot_classifier\n    else:\n        prediction_algorithms = {",
        "detail": "server.backend_app.parser.operation.Construct",
        "documentation": {}
    },
    {
        "label": "construct",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Construct",
        "description": "server.backend_app.parser.operation.Construct",
        "peekOfCode": "def construct(command):\n    '''  \n    CONSTRUCT LR_retail AS SUPERVISED FOR PREDICTION on TARGET MonthlySales FEATURES Age,Price,StockLevel ALGORITHM LR  TEST ON .3 FROM retail;\n    '''\n    command_parts = [part for part in command.split(\" \") if part.strip()]\n    operation_types = [\"PREDICTION\", \"CLASSIFICATION\", \"CLUSTERING\"]\n    operation_type = command_parts[command_parts.index(\"FOR\")+ 1]\n    dataset_train_name = command_parts[command_parts.index(\"FROM\") + 1].split(';')[0]\n    model_name=command_parts[command_parts.index(\"CONSTRUCT\") + 1]\n    if \"ALGORITHM\" in command_parts:",
        "detail": "server.backend_app.parser.operation.Construct",
        "documentation": {}
    },
    {
        "label": "select_algorithm",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Generate",
        "description": "server.backend_app.parser.operation.Generate",
        "peekOfCode": "def select_algorithm(operation_type, algorithm_name='AUTO_ML', **kwargs):\n    # print(algorithm_name)\n    if algorithm_name == 'AUTO_ML':\n        if operation_type.upper() == \"PREDICTION\":\n            tpot_regressor = TPOTRegressor(generations=2, population_size=20, verbosity=2)\n            return tpot_regressor\n        elif operation_type.upper() == \"CLASSIFICATION\":\n            tpot_classifier = TPOTClassifier(generations=2, population_size=20, verbosity=2)\n            return tpot_classifier\n    else:",
        "detail": "server.backend_app.parser.operation.Generate",
        "documentation": {}
    },
    {
        "label": "display_results",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Generate",
        "description": "server.backend_app.parser.operation.Generate",
        "peekOfCode": "def display_results(operation_type, y_test=None, y_pred=None, model=None, features=None, df=None):\n    if operation_type.upper() == \"PREDICTION\":\n        plt.figure(figsize=(10, 6))\n        plt.scatter(y_test, y_pred,alpha=0.6)\n        plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()])\n        plt.xlabel('Measured')\n        plt.ylabel('Predicted')\n        plt.title('Actual vs Predicted Values')\n    elif operation_type.upper() == \"CLASSIFICATION\":\n        cm = confusion_matrix(y_test, y_pred)",
        "detail": "server.backend_app.parser.operation.Generate",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Generate",
        "description": "server.backend_app.parser.operation.Generate",
        "peekOfCode": "def generate(command):  \n    '''GENERATE DISPLAY OF PREDICTION MonthlySales ALGORITHM GB WITH ACCURACY 100 LABEL ProductID FEATURES Age,Price,StockLevel FROM retail OVER retailTestData'''\n    command_parts = [part for part in command.split(\" \") if part.strip()]\n    try:\n        operation_types = [\"PREDICTION\", \"CLASSIFICATION\", \"CLUSTERING\"]\n        operation_type = next((word for word in operation_types if word in command), \"PREDICTION\") ###\n        dataset_train_name = command_parts[command_parts.index(\"FROM\") + 1].split(';')[0]\n        features=command_parts[command_parts.index(\"FEATURES\") + 1].split(',')\n        algorithm_name = command_parts[command_parts.index(\"ALGORITHM\")+ 1] if \"ALGORITHM\" in command_parts else None  ####\n    except:",
        "detail": "server.backend_app.parser.operation.Generate",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.Inspect",
        "description": "server.backend_app.parser.operation.Inspect",
        "peekOfCode": "def inspect(command):\n    '''\n            INSPECT CHECKNULL FEATURES medv FROM Boston\n            INSPECT ENCODING USING ONE-HOT ENCODING feature medv from boston\n    '''\n    command_parts = [part for part in command.split(\" \") if part.strip()]\n    try:\n        operation_types = [\"CHECKNULL\", \"ENCODING\",\"DEDUPLICATE\",\"CATEGORIZE\"]\n        operation_type = next((word for word in operation_types if word in command), \"\") \n        dataset_name = command_parts[command_parts.index(\"FROM\") + 1].split(';')[0]",
        "detail": "server.backend_app.parser.operation.Inspect",
        "documentation": {}
    },
    {
        "label": "Query_manipulate",
        "kind": 2,
        "importPath": "server.backend_app.parser.operation.query_manipulate",
        "description": "server.backend_app.parser.operation.query_manipulate",
        "peekOfCode": "def Query_manipulate(query):\n    response={}\n    print(query)\n    query=query.replace('\\n', '').replace('\\r', '')\n    try:\n        connection_string = os.getenv(\"POSTGES_URL\")\n        conn = create_engine(connection_string)\n        if query.strip().upper().startswith(\"SELECT\"):\n            # Execute DQL query\n            with conn.connect():",
        "detail": "server.backend_app.parser.operation.query_manipulate",
        "documentation": {}
    },
    {
        "label": "query_process",
        "kind": 2,
        "importPath": "server.backend_app.parser.query_process",
        "description": "server.backend_app.parser.query_process",
        "peekOfCode": "def query_process(data):\n    global type_name, model_table_name, target_var, other_ftr, response,currentDB\n    response={}\n    if data.upper().startswith(\"SHOW\"):\n        yield show_db(data)\n    elif data.upper().startswith(\"CONSTRUCT\"):\n        '''CONSTRUCT PREDICTION MonthlySales ALGORITHM GB WITH  LABEL ProductID FEATURES Age Price StockLevel FROM retail OVER retailTestData ;\n           CONSTRUCT CLASSIFICATION Species ALGORITHM KNN WITH  LABEL ProductID FEATURES SepalLengthCm SepalWidthCm FROM Iris ;\n            '''\n        yield construct(data)",
        "detail": "server.backend_app.parser.query_process",
        "documentation": {}
    },
    {
        "label": "test_view",
        "kind": 2,
        "importPath": "server.backend_app.views",
        "description": "server.backend_app.views",
        "peekOfCode": "def test_view(req):\n    if req.method == 'POST':\n        current_directory = os.path.dirname(__file__)\n        if 'file' in req.FILES:\n            file = req.FILES['file']\n            file_name = file.name\n            file_path = os.path.join(current_directory, f'./data/files/{file_name}')\n            if file_name.endswith('.csv'):\n                csvToDB(file)\n            else:",
        "detail": "server.backend_app.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.dl4ml.asgi",
        "description": "server.dl4ml.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.dl4ml.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-j1zm0jk%a)=9u2r(n6q%&ey2zp$xt5^0txs=ws!iew=p-%d(=='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nfrom dotenv import load_dotenv\n# Load environment variables from .env file\nload_dotenv()",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-j1zm0jk%a)=9u2r(n6q%&ey2zp$xt5^0txs=ws!iew=p-%d(=='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nfrom dotenv import load_dotenv\n# Load environment variables from .env file\nload_dotenv()\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "DEBUG = True\nfrom dotenv import load_dotenv\n# Load environment variables from .env file\nload_dotenv()\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'backend_app',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'backend_app',\n    'corsheaders',\n]",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173',\n    'http://localhost:5174',\n]\nROOT_URLCONF = 'dl4ml.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "ROOT_URLCONF = 'dl4ml.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "WSGI_APPLICATION = 'dl4ml.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nFILE_UPLOAD_HANDLERS = [",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',  # Handle file uploads in memory",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',  # Handle file uploads in memory\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',  # Handle file uploads using temporary files",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',  # Handle file uploads in memory\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',  # Handle file uploads using temporary files\n]",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nFILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',  # Handle file uploads in memory\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',  # Handle file uploads using temporary files\n]\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 90242880",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_HANDLERS",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "FILE_UPLOAD_HANDLERS = [\n    'django.core.files.uploadhandler.MemoryFileUploadHandler',  # Handle file uploads in memory\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',  # Handle file uploads using temporary files\n]\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 90242880",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 90242880",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "server.dl4ml.settings",
        "description": "server.dl4ml.settings",
        "peekOfCode": "FILE_UPLOAD_MAX_MEMORY_SIZE = 90242880",
        "detail": "server.dl4ml.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.dl4ml.urls",
        "description": "server.dl4ml.urls",
        "peekOfCode": "urlpatterns = [\n    path('',lambda request: render(request, 'hi.html')),\n    # path('',hi),\n    path('admin/', admin.site.urls),\n    path('test_url/',test_view),\n    # path('upload_file/', upload)\n]",
        "detail": "server.dl4ml.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.dl4ml.wsgi",
        "description": "server.dl4ml.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.dl4ml.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dl4ml.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "server.manage",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "data = {\n    \"Make\": [\"Toyota\", \"Honda\", \"Toyota\", \"Ford\", \"Honda\", \"Ford\"],\n    # \"Price Range\": [\"High\", \"Medium\", \"Low\", \"Medium\", \"Low\", \"High\"],\n    \"Mileage\": [50000, 60000, 30000, 70000, 40000, 80000],\n    \"Age\": [5, 3, 7, 2, 4, 6],\n    \"Price\": [15000, 18000, 12000, 20000, 17000, 22000]\n}\ndf = pd.DataFrame(data)\nprint(df)\n# Define the target variable",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(df)\n# Define the target variable\ntarget_var = \"Price\"\n# Define the categorical variable to be target encoded\ncat_var = \"Make\"\ngrouped = df.groupby(cat_var)\n# Iterating over the groups and printing them\nfor name, group in grouped:\n    print(name)  # Print the name of the group (unique value of cat_var)",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "target_var",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "target_var = \"Price\"\n# Define the categorical variable to be target encoded\ncat_var = \"Make\"\ngrouped = df.groupby(cat_var)\n# Iterating over the groups and printing them\nfor name, group in grouped:\n    print(name)  # Print the name of the group (unique value of cat_var)\n    print(group)  # Print the DataFrame corresponding to the group\n    print('---------------')  #\n# Calculate mean of target variable for each category",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "cat_var",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "cat_var = \"Make\"\ngrouped = df.groupby(cat_var)\n# Iterating over the groups and printing them\nfor name, group in grouped:\n    print(name)  # Print the name of the group (unique value of cat_var)\n    print(group)  # Print the DataFrame corresponding to the group\n    print('---------------')  #\n# Calculate mean of target variable for each category\ntarget_means = df.groupby(cat_var)[target_var].mean()\nprint(target_means)",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "grouped",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "grouped = df.groupby(cat_var)\n# Iterating over the groups and printing them\nfor name, group in grouped:\n    print(name)  # Print the name of the group (unique value of cat_var)\n    print(group)  # Print the DataFrame corresponding to the group\n    print('---------------')  #\n# Calculate mean of target variable for each category\ntarget_means = df.groupby(cat_var)[target_var].mean()\nprint(target_means)\n# Map the mean values back to the original DataFrame",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "target_means",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "target_means = df.groupby(cat_var)[target_var].mean()\nprint(target_means)\n# Map the mean values back to the original DataFrame\ndf[f\"{cat_var}_encoded\"] = df[cat_var].map(target_means)\n# Drop the original categorical variable\ndf.drop(columns=[cat_var], inplace=True)\nprint (df)\n# Display the DataFrame ready for linear regression\nprint(\"DataFrame ready for linear regression:\")\n# from sklearn.linear_model import LinearRegression",
        "detail": "server.test",
        "documentation": {}
    },
    {
        "label": "df[f\"{cat_var}_encoded\"]",
        "kind": 5,
        "importPath": "server.test",
        "description": "server.test",
        "peekOfCode": "df[f\"{cat_var}_encoded\"] = df[cat_var].map(target_means)\n# Drop the original categorical variable\ndf.drop(columns=[cat_var], inplace=True)\nprint (df)\n# Display the DataFrame ready for linear regression\nprint(\"DataFrame ready for linear regression:\")\n# from sklearn.linear_model import LinearRegression\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import mean_squared_error\n# # Splitting the data into features and target variable",
        "detail": "server.test",
        "documentation": {}
    }
]